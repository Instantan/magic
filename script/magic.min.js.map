{
  "version": 3,
  "sources": ["node_modules/.pnpm/nanoassert@1.1.0/node_modules/nanoassert/index.js", "node_modules/.pnpm/nanomorph@5.4.3/node_modules/nanomorph/lib/events.js", "node_modules/.pnpm/nanomorph@5.4.3/node_modules/nanomorph/lib/morph.js", "node_modules/.pnpm/nanomorph@5.4.3/node_modules/nanomorph/index.js", "magic.js"],
  "sourcesContent": ["assert.notEqual = notEqual\nassert.notOk = notOk\nassert.equal = equal\nassert.ok = assert\n\nmodule.exports = assert\n\nfunction equal (a, b, m) {\n  assert(a == b, m) // eslint-disable-line eqeqeq\n}\n\nfunction notEqual (a, b, m) {\n  assert(a != b, m) // eslint-disable-line eqeqeq\n}\n\nfunction notOk (t, m) {\n  assert(!t, m)\n}\n\nfunction assert (t, m) {\n  if (!t) throw new Error(m || 'AssertionError')\n}\n", "module.exports = [\n  // attribute events (can be set with attributes)\n  'onclick',\n  'ondblclick',\n  'onmousedown',\n  'onmouseup',\n  'onmouseover',\n  'onmousemove',\n  'onmouseout',\n  'onmouseenter',\n  'onmouseleave',\n  'ontouchcancel',\n  'ontouchend',\n  'ontouchmove',\n  'ontouchstart',\n  'ondragstart',\n  'ondrag',\n  'ondragenter',\n  'ondragleave',\n  'ondragover',\n  'ondrop',\n  'ondragend',\n  'onkeydown',\n  'onkeypress',\n  'onkeyup',\n  'onunload',\n  'onabort',\n  'onerror',\n  'onresize',\n  'onscroll',\n  'onselect',\n  'onchange',\n  'onsubmit',\n  'onreset',\n  'onfocus',\n  'onblur',\n  'oninput',\n  'onanimationend',\n  'onanimationiteration',\n  'onanimationstart',\n  // other common events\n  'oncontextmenu',\n  'onfocusin',\n  'onfocusout'\n]\n", "var events = require('./events')\nvar eventsLength = events.length\n\nvar ELEMENT_NODE = 1\nvar TEXT_NODE = 3\nvar COMMENT_NODE = 8\n\nmodule.exports = morph\n\n// diff elements and apply the resulting patch to the old node\n// (obj, obj) -> null\nfunction morph (newNode, oldNode) {\n  var nodeType = newNode.nodeType\n  var nodeName = newNode.nodeName\n\n  if (nodeType === ELEMENT_NODE) {\n    copyAttrs(newNode, oldNode)\n  }\n\n  if (nodeType === TEXT_NODE || nodeType === COMMENT_NODE) {\n    if (oldNode.nodeValue !== newNode.nodeValue) {\n      oldNode.nodeValue = newNode.nodeValue\n    }\n  }\n\n  // Some DOM nodes are weird\n  // https://github.com/patrick-steele-idem/morphdom/blob/master/src/specialElHandlers.js\n  if (nodeName === 'INPUT') updateInput(newNode, oldNode)\n  else if (nodeName === 'OPTION') updateOption(newNode, oldNode)\n  else if (nodeName === 'TEXTAREA') updateTextarea(newNode, oldNode)\n\n  copyEvents(newNode, oldNode)\n}\n\nfunction copyAttrs (newNode, oldNode) {\n  var oldAttrs = oldNode.attributes\n  var newAttrs = newNode.attributes\n  var attrNamespaceURI = null\n  var attrValue = null\n  var fromValue = null\n  var attrName = null\n  var attr = null\n\n  for (var i = newAttrs.length - 1; i >= 0; --i) {\n    attr = newAttrs[i]\n    attrName = attr.name\n    attrNamespaceURI = attr.namespaceURI\n    attrValue = attr.value\n    if (attrNamespaceURI) {\n      attrName = attr.localName || attrName\n      fromValue = oldNode.getAttributeNS(attrNamespaceURI, attrName)\n      if (fromValue !== attrValue) {\n        oldNode.setAttributeNS(attrNamespaceURI, attrName, attrValue)\n      }\n    } else {\n      if (!oldNode.hasAttribute(attrName)) {\n        oldNode.setAttribute(attrName, attrValue)\n      } else {\n        fromValue = oldNode.getAttribute(attrName)\n        if (fromValue !== attrValue) {\n          // apparently values are always cast to strings, ah well\n          if (attrValue === 'null' || attrValue === 'undefined') {\n            oldNode.removeAttribute(attrName)\n          } else {\n            oldNode.setAttribute(attrName, attrValue)\n          }\n        }\n      }\n    }\n  }\n\n  // Remove any extra attributes found on the original DOM element that\n  // weren't found on the target element.\n  for (var j = oldAttrs.length - 1; j >= 0; --j) {\n    attr = oldAttrs[j]\n    if (attr.specified !== false) {\n      attrName = attr.name\n      attrNamespaceURI = attr.namespaceURI\n\n      if (attrNamespaceURI) {\n        attrName = attr.localName || attrName\n        if (!newNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n          oldNode.removeAttributeNS(attrNamespaceURI, attrName)\n        }\n      } else {\n        if (!newNode.hasAttributeNS(null, attrName)) {\n          oldNode.removeAttribute(attrName)\n        }\n      }\n    }\n  }\n}\n\nfunction copyEvents (newNode, oldNode) {\n  for (var i = 0; i < eventsLength; i++) {\n    var ev = events[i]\n    if (newNode[ev]) {           // if new element has a whitelisted attribute\n      oldNode[ev] = newNode[ev]  // update existing element\n    } else if (oldNode[ev]) {    // if existing element has it and new one doesnt\n      oldNode[ev] = undefined    // remove it from existing element\n    }\n  }\n}\n\nfunction updateOption (newNode, oldNode) {\n  updateAttribute(newNode, oldNode, 'selected')\n}\n\n// The \"value\" attribute is special for the <input> element since it sets the\n// initial value. Changing the \"value\" attribute without changing the \"value\"\n// property will have no effect since it is only used to the set the initial\n// value. Similar for the \"checked\" attribute, and \"disabled\".\nfunction updateInput (newNode, oldNode) {\n  var newValue = newNode.value\n  var oldValue = oldNode.value\n\n  updateAttribute(newNode, oldNode, 'checked')\n  updateAttribute(newNode, oldNode, 'disabled')\n\n  // The \"indeterminate\" property can not be set using an HTML attribute.\n  // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\n  if (newNode.indeterminate !== oldNode.indeterminate) {\n    oldNode.indeterminate = newNode.indeterminate\n  }\n\n  // Persist file value since file inputs can't be changed programatically\n  if (oldNode.type === 'file') return\n\n  if (newValue !== oldValue) {\n    oldNode.setAttribute('value', newValue)\n    oldNode.value = newValue\n  }\n\n  if (newValue === 'null') {\n    oldNode.value = ''\n    oldNode.removeAttribute('value')\n  }\n\n  if (!newNode.hasAttributeNS(null, 'value')) {\n    oldNode.removeAttribute('value')\n  } else if (oldNode.type === 'range') {\n    // this is so elements like slider move their UI thingy\n    oldNode.value = newValue\n  }\n}\n\nfunction updateTextarea (newNode, oldNode) {\n  var newValue = newNode.value\n  if (newValue !== oldNode.value) {\n    oldNode.value = newValue\n  }\n\n  if (oldNode.firstChild && oldNode.firstChild.nodeValue !== newValue) {\n    // Needed for IE. Apparently IE sets the placeholder as the\n    // node value and vise versa. This ignores an empty update.\n    if (newValue === '' && oldNode.firstChild.nodeValue === oldNode.placeholder) {\n      return\n    }\n\n    oldNode.firstChild.nodeValue = newValue\n  }\n}\n\nfunction updateAttribute (newNode, oldNode, name) {\n  if (newNode[name] !== oldNode[name]) {\n    oldNode[name] = newNode[name]\n    if (newNode[name]) {\n      oldNode.setAttribute(name, '')\n    } else {\n      oldNode.removeAttribute(name)\n    }\n  }\n}\n", "var assert = require('nanoassert')\nvar morph = require('./lib/morph')\n\nvar TEXT_NODE = 3\n// var DEBUG = false\n\nmodule.exports = nanomorph\n\n// Morph one tree into another tree\n//\n// no parent\n//   -> same: diff and walk children\n//   -> not same: replace and return\n// old node doesn't exist\n//   -> insert new node\n// new node doesn't exist\n//   -> delete old node\n// nodes are not the same\n//   -> diff nodes and apply patch to old node\n// nodes are the same\n//   -> walk all child nodes and append to old node\nfunction nanomorph (oldTree, newTree, options) {\n  // if (DEBUG) {\n  //   console.log(\n  //   'nanomorph\\nold\\n  %s\\nnew\\n  %s',\n  //   oldTree && oldTree.outerHTML,\n  //   newTree && newTree.outerHTML\n  // )\n  // }\n  assert.equal(typeof oldTree, 'object', 'nanomorph: oldTree should be an object')\n  assert.equal(typeof newTree, 'object', 'nanomorph: newTree should be an object')\n\n  if (options && options.childrenOnly) {\n    updateChildren(newTree, oldTree)\n    return oldTree\n  }\n\n  assert.notEqual(\n    newTree.nodeType,\n    11,\n    'nanomorph: newTree should have one root node (which is not a DocumentFragment)'\n  )\n\n  return walk(newTree, oldTree)\n}\n\n// Walk and morph a dom tree\nfunction walk (newNode, oldNode) {\n  // if (DEBUG) {\n  //   console.log(\n  //   'walk\\nold\\n  %s\\nnew\\n  %s',\n  //   oldNode && oldNode.outerHTML,\n  //   newNode && newNode.outerHTML\n  // )\n  // }\n  if (!oldNode) {\n    return newNode\n  } else if (!newNode) {\n    return null\n  } else if (newNode.isSameNode && newNode.isSameNode(oldNode)) {\n    return oldNode\n  } else if (newNode.tagName !== oldNode.tagName || getComponentId(newNode) !== getComponentId(oldNode)) {\n    return newNode\n  } else {\n    morph(newNode, oldNode)\n    updateChildren(newNode, oldNode)\n    return oldNode\n  }\n}\n\nfunction getComponentId (node) {\n  return node.dataset ? node.dataset.nanomorphComponentId : undefined\n}\n\n// Update the children of elements\n// (obj, obj) -> null\nfunction updateChildren (newNode, oldNode) {\n  // if (DEBUG) {\n  //   console.log(\n  //   'updateChildren\\nold\\n  %s\\nnew\\n  %s',\n  //   oldNode && oldNode.outerHTML,\n  //   newNode && newNode.outerHTML\n  // )\n  // }\n  var oldChild, newChild, morphed, oldMatch\n\n  // The offset is only ever increased, and used for [i - offset] in the loop\n  var offset = 0\n\n  for (var i = 0; ; i++) {\n    oldChild = oldNode.childNodes[i]\n    newChild = newNode.childNodes[i - offset]\n    // if (DEBUG) {\n    //   console.log(\n    //   '===\\n- old\\n  %s\\n- new\\n  %s',\n    //   oldChild && oldChild.outerHTML,\n    //   newChild && newChild.outerHTML\n    // )\n    // }\n    // Both nodes are empty, do nothing\n    if (!oldChild && !newChild) {\n      break\n\n    // There is no new child, remove old\n    } else if (!newChild) {\n      oldNode.removeChild(oldChild)\n      i--\n\n    // There is no old child, add new\n    } else if (!oldChild) {\n      oldNode.appendChild(newChild)\n      offset++\n\n    // Both nodes are the same, morph\n    } else if (same(newChild, oldChild)) {\n      morphed = walk(newChild, oldChild)\n      if (morphed !== oldChild) {\n        oldNode.replaceChild(morphed, oldChild)\n        offset++\n      }\n\n    // Both nodes do not share an ID or a placeholder, try reorder\n    } else {\n      oldMatch = null\n\n      // Try and find a similar node somewhere in the tree\n      for (var j = i; j < oldNode.childNodes.length; j++) {\n        if (same(oldNode.childNodes[j], newChild)) {\n          oldMatch = oldNode.childNodes[j]\n          break\n        }\n      }\n\n      // If there was a node with the same ID or placeholder in the old list\n      if (oldMatch) {\n        morphed = walk(newChild, oldMatch)\n        if (morphed !== oldMatch) offset++\n        oldNode.insertBefore(morphed, oldChild)\n\n      // It's safe to morph two nodes in-place if neither has an ID\n      } else if (!newChild.id && !oldChild.id) {\n        morphed = walk(newChild, oldChild)\n        if (morphed !== oldChild) {\n          oldNode.replaceChild(morphed, oldChild)\n          offset++\n        }\n\n      // Insert the node at the index if we couldn't morph or find a matching node\n      } else {\n        oldNode.insertBefore(newChild, oldChild)\n        offset++\n      }\n    }\n  }\n}\n\nfunction same (a, b) {\n  if (a.id) return a.id === b.id\n  if (a.isSameNode) return a.isSameNode(b)\n  if (a.tagName !== b.tagName) return false\n  if (a.type === TEXT_NODE) return a.nodeValue === b.nodeValue\n  return false\n}\n", "import * as nanomorph from 'nanomorph'\n\nconst magic = {\n    socket: null\n}\n\nfunction connect() {\n    const ws_params = new URLSearchParams(location.search);\n    ws_params.append(\"ws\", document\n        .getElementsByTagName(\"html\")[0]\n        .attributes.getNamedItem(\"data-connid\").value);\n    magic.socket = new WebSocket(\"ws://\" + location.host + location.pathname + \"?\" + ws_params);\n    magic.socket.onopen = function() {\n        // // subscribe to some channels\n        // magic.socket.send(JSON.stringify({\n        //     //.... some message the I must send when I connect ....\n        // }));\n    };\n\n    magic.socket.onmessage = function(e) {\n        console.log(e)\n    };\n\n    magic.socket.onclose = function(e) {\n        console.log('Socket is closed. Reconnect will be attempted in 1 second.', e.reason);\n        setTimeout(function() {\n            connect();\n        }, 1000);\n    };\n\n    magic.socket.onerror = function(err) {\n        console.error('Socket encountered error: ', err, 'Closing socket');\n        magic.socket.close();\n    };\n}\nconnect()"],
  "mappings": "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",
  "names": ["require_nanoassert", "__commonJSMin", "exports", "module", "assert", "notEqual", "notOk", "equal", "a", "b", "m", "t", "require_events", "__commonJSMin", "exports", "module", "require_morph", "__commonJSMin", "exports", "module", "events", "eventsLength", "ELEMENT_NODE", "TEXT_NODE", "COMMENT_NODE", "morph", "newNode", "oldNode", "nodeType", "nodeName", "copyAttrs", "updateInput", "updateOption", "updateTextarea", "copyEvents", "oldAttrs", "newAttrs", "attrNamespaceURI", "attrValue", "fromValue", "attrName", "attr", "i", "j", "ev", "updateAttribute", "newValue", "oldValue", "name", "require_nanomorph", "__commonJSMin", "exports", "module", "assert", "morph", "TEXT_NODE", "nanomorph", "oldTree", "newTree", "options", "updateChildren", "walk", "newNode", "oldNode", "getComponentId", "node", "oldChild", "newChild", "morphed", "oldMatch", "offset", "same", "j", "a", "b", "nanomorph", "magic", "connect", "ws_params", "e", "err"]
}
